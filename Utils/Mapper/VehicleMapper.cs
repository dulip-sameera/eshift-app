using eshift.Dto;
using eshift.Model;

namespace eshift.Utils.Mapper
{
    internal class VehicleMapper
    {
        public static VehicleModel? ToModel(VehicleDto dto)
        {
            if (dto == null) return null;

            return new VehicleModel
            {
                Id = 0, // Id is usually generated by DB
                Brand = dto.Brand,
                Model = dto.Model,
                RegistrationNumber = dto.RegistrationNumber,
                ContainerVolume = dto.ContainerVolume,
                MaxWeight = dto.MaxWeight
            };
        }
        public static VehicleDto? ToDto(VehicleModel model)
        {
            if (model == null) return null;

            return new VehicleDto
            (
                model.Brand,
                model.Model,
                model.RegistrationNumber,
                model.ContainerVolume,
                model.MaxWeight
            );
        }
        public static List<VehicleDto> ToDtoList(IEnumerable<VehicleModel> models)
        {
            if (models == null) return new List<VehicleDto>();

            return [.. models.Select(ToDto)];
        }
        public static List<VehicleModel> ToModelList(IEnumerable<VehicleDto> dtos)
        {
            if (dtos == null) return new List<VehicleModel>();

            return [.. dtos.Select(ToModel)];
        }
        public static VehicleDbIdDto ToDbIdDto(VehicleModel model)
        {
            if (model == null) return null;
            return new VehicleDbIdDto(model.Id, model.RegistrationNumber);
        }
    }
}
